(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{262:function(e,t,n){"use strict";n.r(t);var a=n(28),s=Object(a.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"_02-the-javascript-universe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_02-the-javascript-universe"}},[this._v("#")]),this._v(" 02. The JavaScript Universe")]),this._v(" "),t("p",[this._v('In the beginning was the Value.\nWhat is a value? It’s hard to say.\nThis is like asking what a number is in math, or what a point is in geometry. A value is a thing in the JavaScript universe.\nNumbers are values — but so are a few other things, like objects and functions. However, many things, such as an if statement or a variable declaration, are not values.\nCode and Values\nTo distinguish values from everything else in my JavaScript program, I like to imagine this drawing of the Little Prince by Antoine de Saint-Exupéry:\nLittle Prince by Antoine de Saint-Exupéry\nI’m standing on a small asteroid — it is the code of my program.\nOn its surface, I see the if statements and variable declarations, commas, curly braces, and all the other things one might find in the JavaScript code.\nMy code contains instructions like “make a function call” or “do this thing many times”, or even “throw an error”. I walk through these instructions step by step — running errands from my small asteroid.\nBut every once in a while, I look up.\nOn a clear night, I see the different values in the JavaScript sky: booleans, numbers, strings, symbols, functions and objects, null and undefined — oh my! I might refer to them in my code, but they don’t exist inside my code.\nIn my JavaScript universe, values float in space.\nJavaScript Values\n“Hold on,“ you might say, “I always thought of values as being inside of my code!” Here, I’m asking you to take a leap of faith. It will take a few more modules for this mental model to pay off. Give it five minutes.\nBack to values. Broadly, there are two kinds of them.\nPrimitive Values\nPrimitive Values are numbers and strings, among other things. Open your browser\'s console and print these primitive values using console.log():\nconsole.log(2);\nconsole.log("hello");\nconsole.log(undefined);\nAll primitive values have something in common. There’s nothing I can do in my code that would affect them. This sounds a bit vague, so we’ll explore what this means concretely in the next module. For now, I’ll say that primitive values are like stars — cold and distant, but always there when I need them.\nThat’s the first kind of values.\nObjects and Functions\nObjects and Functions are also values, but they are not primitive. This makes them very special. Go ahead and log a few of them to the browser console:\nconsole.log({});\nconsole.log([]);\nconsole.log(x => x * 2);\nNotice how the browser console displays them differently from the primitive values. Some browsers might display an arrow before them, or do something special when you click them. If you have a few different browsers installed (e.g. Chrome and Firefox), compare how they visualize objects and functions.\nObjects and functions are special because I can manipulate them from my code. For example, I can connect them to other values. This is rather vague — so we’ll refine this idea in a later module. For now, I can say that if primitive values are like distant stars, then objects and functions are more like rocks floating nearby my code. They’re close enough that I can manipulate them.\nAnd that’s the second kind of values.\nYou might have questions. Good. If you ask a question, the JavaScript universe might answer it! Provided, of course, that you know how to ask.\nExpressions\nThere are many questions JavaScript can’t answer. If you want to know whether it’s better to confess your true feelings to your best friend or to keep waiting until you both turn into skeletons, JavaScript won’t be of much help.\nBut there are some questions that JavaScript would be delighted to answer. These questions have a special name — they are called expressions.\nIf we “ask” the expression 2 + 2, JavaScript will “answer” with the value 4.\nconsole.log(2 + 2); // 4\nExpressions are questions that JavaScript can answer. JavaScript answers expressions in the only way it knows how — with values.\nExpression\nIf the word “expression” confuses you, think of it as a piece of code that expresses a value. You might hear people say that 2 + 2 “results in” or “evaluates to” 4. These are all different ways to say the same thing.\nWe ask JavaScript 2 + 2, and it answers with 4. Expressions always result in a single value. Now we know enough about expressions to be dangerous!\nI previously said that there are many types of JavaScript values: numbers, strings, objects, and so on. How do we know any particular value’s type?\nThis sounds like a question. Do we dare to ask it?\nChecking a Type\nAt first, all values in the JavaScript cosmos might look the same — bright dots in the sky. But if you look closely, you’ll realize there are fewer than ten different types of values. Values of the same type behave in similar ways.\nIf we want to check a value’s type, we can ask it with the typeof operator. JavaScript will answer our question with one of the predetermined string values, such as "number", "string", or "object".\ntypeof\nBelow are a few examples you can try in the browser console:\nconsole.log(typeof(2)); // "number"\nconsole.log(typeof("hello")); // "string"\nconsole.log(typeof(undefined)); // "undefined"\nHere, typeof(2) is an expression — and it results in the "number" value.\nStrictly saying, using parens isn’t required with typeof. For example, typeof 2 would work just as fine as typeof(2). However, sometimes parens are required to avoid an ambiguity. One of the cases below would break if we omitted the parens after typeof. Try to guess which one it is:\nconsole.log(typeof({})); // "object"\nconsole.log(typeof([])); // "object"\nconsole.log(typeof(x => x * 2)); // "function"\nYou can verify your guess in the browser console.\nUsing typeof\nNow take another look at the last three examples — this time with close attention to their results. Did you find any of these results surprising? Why?\nTypes of Values\nAs an aspiring astronomer, you might want to know about every type of value that can be observed in the JavaScript sky. After almost twenty five years of studying JavaScript, the scientists have only discovered nine such types:\nPrimitive Values\nUndefined (undefined), used for unintentionally missing values.\nNull (null), used for intentionally missing values.\nBooleans (true and false), used for logical operations.\nNumbers (-100, 3.14, and others), used for math calculations.\nStrings ("hello", "abracadabra", and others), used for text.\nSymbols (uncommon), used to hide implementation details.\nBigInts (uncommon and new), used for math on big numbers.\nObjects and Functions\nObjects ({} and others), used to group related data and code.\nFunctions (x => x * 2 and others), used to refer to code.\nNo Other Types\nYou might ask: “But what about other types I have used, like arrays?”\nIn JavaScript, there are no other fundamental value types other than the ones we have just enumerated. The rest are all objects! For example, even arrays, dates, and regular expressions fundamentally are objects in JavaScript:\nconsole.log(typeof([])); // "object"\nconsole.log(typeof(new Date())); // "object"\nconsole.log(typeof(/(hello|goodbye)/)); // "object"\n“I see,” you might reply, “this is because everything is an object!” Alas, this is a popular urban legend, but it’s not true. Although code like "hi".toUpperCase() makes "hi" seem like an object, this is nothing but an illusion. JavaScript creates a wrapper object when you do this, and then immediately discards it.\nIt’s fine if this mechanism doesn’t quite click yet. For now, you only need to remember that primitive values, such as numbers and strings, are not objects.\nRecap\nLet’s recap what we know so far:\nThere are values, and then there’s everything else. We can think of values as different things “floating” in our JavaScript universe. They don’t exist inside our code, but we can refer to them from our code.\nThere are two categories of values: there are Primitive Values, and then there are Objects and Functions. In total, there are nine separate types. Each type serves a specific purpose, but some are rarely used.\nSome values are lonely. For example, null is the only value of the Null type, and undefined is the only value of the Undefined type. As we will learn later, these two lonely values are quite the troublemakers!\nWe can ask questions with expressions. JavaScript will answer to us with values. For example, the 2 + 2 expression is answered with 4.\nWe can inspect the type of something by wrapping it in a typeof expression. For example, typeof(4) is the string value "number".\nExercises\nNow it’s time to put what we learned to action.\nEven if you already have a decent amount of experience with JavaScript don\'t skip the exercise questions! I personally learned some of these things only a few years ago.\nClick here to answer these questions and provide feedback about this module. When you complete the exercises I will send the next module right away.\nNext up we will explore the Primitive Values in more detail. We look at what these different primitive types like numbers and Null have in common, and learn a thing or two about what equality means in JavaScript.\nWe will also continue to refine our mental model. This module presents a crude sketch — an approximation. We will focus on different parts of the picture and fill them in with more details, like a progressive JPEG image.\nThese might seem like small steps, but we’re laying the foundation for everything else to come. We’re building the JavaScript universe, together.')])])}),[],!1,null,null,null);t.default=s.exports}}]);