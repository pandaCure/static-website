(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{249:function(t,s,a){t.exports=a.p+"assets/img/1.4e270389.png"},250:function(t,s,a){t.exports=a.p+"assets/img/2.818cce77.png"},251:function(t,s,a){t.exports=a.p+"assets/img/3.2ffdde92.png"},252:function(t,s,a){t.exports=a.p+"assets/img/4.6208c7c0.png"},253:function(t,s,a){t.exports=a.p+"assets/img/6.deadc8a4.png"},254:function(t,s,a){t.exports=a.p+"assets/img/7.faf3c058.png"},255:function(t,s,a){t.exports=a.p+"assets/img/5.eeeba3ff.png"},264:function(t,s,a){"use strict";a.r(s);var r=a(28),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"javascript-中为什么-0-1-0-2-0-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中为什么-0-1-0-2-0-3"}},[t._v("#")]),t._v(" Javascript 中为什么 0.1 + 0.2 === 0.3?")]),t._v(" "),r("p",[t._v("Number 作为 JavaScript 中的基本类型，无论是整数还是小数其类型都是双精度 IEEE754 64 位浮点类型。但是这就造成了一个精确计算的问题：0.1 + 0.2 === 0.3? 在浏览器控制台打印出来：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(249),alt:"打印结果"}})]),t._v(" "),r("p",[t._v("这种送分题，js 却送了命。令人窒息的操作。这个例子很常见，我们不是为了关注这个例子本身，我们需要明白的是为什么会出现这样的结果？哪一步出了问题？还有那些计算可能会出现这样的问题？怎么解决？")]),t._v(" "),r("h2",{attrs:{id:"ieee754"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ieee754"}},[t._v("#")]),t._v(" IEEE754")]),t._v(" "),r("p",[t._v("在 IEEE754 中，双精度浮点数储存为 64 位：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(250),alt:"双精度浮点数"}})]),t._v(" "),r("p",[t._v("指数位可以通过下面的方法转换为使用的指数值：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(251),alt:"使用的指数值"}})]),t._v(" "),r("p",[t._v("浮点数表示的值的形式由 "),r("code",[t._v("e")]),t._v(" 和 "),r("code",[t._v("f")]),t._v(" 确定。\n这里有个疑问：")]),t._v(" "),r("ul",[r("li",[t._v("为什么 bias 是 1~2046？是因为指数位没有办法表示-1 等复数，所以 e=1024，base 就等于-1。")]),t._v(" "),r("li",[t._v("为什么"),r("code",[t._v("2 ** 11")]),t._v("要减1,因为二进制"),r("code",[t._v("0b11111111111")]),t._v("的最大值是"),r("code",[t._v("2 ** 11")])])]),t._v(" "),r("h2",{attrs:{id:"javascript-是如何表示数字的？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是如何表示数字的？"}},[t._v("#")]),t._v(" JavaScript 是如何表示数字的？")]),t._v(" "),r("p",[t._v("JavaScript 使用 Number 类型表示数字（整数和浮点数），遵循 IEEE 754 标准 通过 64 位来表示一个数字")]),t._v(" "),r("p",[t._v("通过图片具体看一下数字在内存中的表示:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(252),alt:"数字在内存中"}})]),t._v(" "),r("p",[t._v("图片文字说明")]),t._v(" "),r("ul",[r("li",[t._v("第 0 位：符号位，0 表示正数，1 表示负数(s)")]),t._v(" "),r("li",[t._v("第 1 位到第 11 位：储存指数部分（e）")]),t._v(" "),r("li",[t._v("第 12 位到第 63 位：储存小数部分（即有效数字）f")])]),t._v(" "),r("h2",{attrs:{id:"根据-ieee754-计算-0-1-0-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#根据-ieee754-计算-0-1-0-2"}},[t._v("#")]),t._v(" 根据 IEEE754 计算 0.1+0.2")]),t._v(" "),r("h3",{attrs:{id:"_1-将-0-1-使用转换为二进制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-将-0-1-使用转换为二进制"}},[t._v("#")]),t._v(" 1. 将 0.1 使用转换为二进制")]),t._v(" "),r("p",[r("img",{attrs:{src:a(253),alt:"0.1"}})]),t._v(" "),r("p",[t._v('由于小数位 仅储存 52bit, 储存时会将超出精度部分进行"零舍一入"')]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("值类型")]),t._v(" "),r("th",[t._v("小数位(储存范围内)")]),t._v(" "),r("th",[t._v("小数位(储存范围外)")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("无限精确值")]),t._v(" "),r("td",[t._v("1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001")]),t._v(" "),r("td",[t._v("1001 1001...")])]),t._v(" "),r("tr",[r("td",[t._v("实际储存值")]),t._v(" "),r("td",[t._v("1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1010")]),t._v(" "),r("td",[t._v("-")])])])]),t._v(" "),r("p",[t._v("由于计算加减时不会对指数位进行位运算，这里不计算指数位的表示，直接使用数字表示最终的指数值")]),t._v(" "),r("p",[t._v("0.1、0.2 的表示如下：")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("浮点数数值")]),t._v(" "),r("th",[t._v("符号位 "),r("code",[t._v("s")])]),t._v(" "),r("th",[t._v("指数值 "),r("code",[t._v("E")])]),t._v(" "),r("th",[t._v("小数位 "),r("code",[t._v("f")])])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("0.1")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("-4")]),t._v(" "),r("td",[t._v("1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1010")])]),t._v(" "),r("tr",[r("td",[t._v("0.2")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("-3")]),t._v(" "),r("td",[t._v("1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1010")])])])]),t._v(" "),r("h3",{attrs:{id:"_2-将-0-1-与-0-2-相加"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-将-0-1-与-0-2-相加"}},[t._v("#")]),t._v(" 2. 将 0.1 与 0.2 相加")]),t._v(" "),r("p",[t._v("在计算浮点数相加时需要先进行“对位”，将较小的指数化为较大的指数，并将小数部分相应右移")]),t._v(" "),r("p",[r("img",{attrs:{src:a(254),alt:"将 0.1 与 0.2 相加"}})]),t._v(" "),r("p",[t._v("可以通过下面的方法检验计算结果是否于 js 中一致：")]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b10011001100110011001100110011001100110011001100110100")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//> true")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//计算正确")]),t._v("\n")])])]),r("h2",{attrs:{id:"计算-javascript-number-的特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算-javascript-number-的特性"}},[t._v("#")]),t._v(" 计算 javascript Number 的特性")]),t._v(" "),r("p",[t._v("在js中 Number对象上附带了许多属性，表示可数的范围等信息，例如 Number.MAX_SAFE_INTEGER 是一个16位的数字，这一部分将解释如何计算出这些有特殊意义的数字")]),t._v(" "),r("h3",{attrs:{id:"_1-计算-number-max-value-和-number-min-value"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算-number-max-value-和-number-min-value"}},[t._v("#")]),t._v(" 1.计算 Number.MAX_VALUE 和 Number.MIN_VALUE")]),t._v(" "),r("p",[t._v("当符号位为0、指数取到1023、小数位全为1时，为可表示的最大值")]),t._v(" "),r("p",[t._v("当符号位为0、指数位全为0（表示非规格浮点数）、小数位仅最后一位为1时，为可表示的最小正值")]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" max "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1023")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmax "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//> true")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" min "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1022")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmin "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//> true")]),t._v("\n")])])]),r("h3",{attrs:{id:"_2-计算-number-max-safe-integer-和-number-min-safe-integer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算-number-max-safe-integer-和-number-min-safe-integer"}},[t._v("#")]),t._v(" 2.计算 Number.MAX_SAFE_INTEGER 和 Number.MIN_SAFE_INTEGER")]),t._v(" "),r("p",[r("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("表示最大安全整数，它是9开头的16位数字，也表明js number最大精度不超过16位。")]),t._v(" "),r("p",[t._v("ECMASCRIPT-262 定义：")]),t._v(" "),r("blockquote",[r("p",[t._v("The value of Number.MAX_SAFE_INTEGER is the largest integer n such that n >and n + 1 are both exactly representable as a Number value. "),r("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.ecma-international"),r("OutboundLink")],1),t._v("...")])]),t._v(" "),r("p",[t._v("既然说到这里，再给大家科普一个小知识点：js 最大安全数是 Number. MAX_SAFE_INTEGER == Math.pow(2, 53) - 1, 而不是 Math.pow(2, 52) - 1, why？尾数部分不是只有 52 位吗?")]),t._v(" "),r("p",[t._v("这是因为二进制表示有效数字总是 1.xx…xx 的形式，尾数部分 f 在规约形式下第一位默认为 1（省略不写，xx..xx 为尾数部分 f，最长 52 位）。因此，JavaScript 提供的有效数字最长为 53 个二进制位（64 位浮点的后 52 位+被省略的 1 位）")]),t._v(" "),r("p",[t._v("改变指数位为53，这让每个小数位都表示浮点数的整数部分，小数位最低位对应 ，然后将每个小数位都置1，可得最大准确整数：")]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" max_safe_int "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmax_safe_int "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SAFE_INTEGER")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//> true")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//当它 +1 时，可由 (-1)**0 * 2**53 * (Number.parseInt("1"+"0".repeat(52),2) * 2**-52) 正确表示，而再 +1 时则无法准确表示')]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//符号位取反可得最小安全整数")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" max_safe_int "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_SAFE_INTEGER")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[t._v("简单验证一下")]),t._v(" "),r("p",[r("img",{attrs:{src:a(255),alt:"简单验证一下"}})]),t._v(" "),r("h3",{attrs:{id:"_3-计算-number-epsilon"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算-number-epsilon"}},[t._v("#")]),t._v(" 3.计算 Number.EPSILON")]),t._v(" "),r("p",[t._v("Number.EPSILON 是一个极小值。"),r("em",[t._v("但并不是用来检测误差范围内的值")]),t._v("。 例如：")]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[t._v("Math"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EPSILON")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//> true")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2017-9-27 补充")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.3")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.4")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EPSILON")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//> false")]),t._v("\n")])])]),r("p",[t._v("根据 ECMASCRIPT-262 定义：")]),t._v(" "),r("blockquote",[r("p",[t._v("The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1 that is representable as a Number value, which is approximately 2.2204460492503130808472633361816 x 10‍−‍16.")])]),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-number.epsilon",target:"_blank",rel:"noopener noreferrer"}},[t._v("规范地址"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("根据定义Number.EPSILON是大于1的最小可表示数与1的差，可以据此计算出 Number.EPSILON 的值：")]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将表示1的二进制小数位的最左端置1，可表示大于1的最小数")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" epsilon "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("51")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// (-1)**0 * 2**0 * (+`0b1${"0".repeat(51)}1` * 2**-52) - 1;')]),t._v("\nepsilon "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EPSILON")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//> true")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);